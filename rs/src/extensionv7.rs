/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MegaHackExt_Colour {
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_MegaHackExt_Colour() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_Colour>(),
        3usize,
        concat!("Size of: ", stringify!(MegaHackExt_Colour))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_Colour>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_Colour))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MegaHackExt_Colour>())).r as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(MegaHackExt_Colour),
        "::",
        stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MegaHackExt_Colour>())).g as *const _ as usize },
        1usize,
        concat!(
        "Offset of field: ",
        stringify!(MegaHackExt_Colour),
        "::",
        stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MegaHackExt_Colour>())).b as *const _ as usize },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(MegaHackExt_Colour),
        "::",
        stringify!(b)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?setModEnabled@Client@MegaHackExt@@YAXPEBD_N@Z"]
    pub fn MegaHackExt_Client_setModEnabled(str_: *const ::std::os::raw::c_char, b: bool);
}
extern "C" {
    #[link_name = "\u{1}?getModEnabled@Client@MegaHackExt@@YA_NPEBD@Z"]
    pub fn MegaHackExt_Client_getModEnabled(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?commit@Client@MegaHackExt@@YAXPAX@Z"]
    pub fn MegaHackExt_Client_commit(ptr: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_Window {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_MegaHackExt_Window() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_Window>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_Window))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_Window>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_Window))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@Window@MegaHackExt@@SAPAV12@PBD@Z"]
    pub fn MegaHackExt_Window_Create(
        title: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_Window;
}
extern "C" {
    #[link_name = "\u{1}?add@Window@MegaHackExt@@QAEXPAX@Z"]
    pub fn MegaHackExt_Window_add(this: *mut MegaHackExt_Window, obj: *mut ::std::os::raw::c_void);
}
impl MegaHackExt_Window {
    #[inline]
    pub unsafe fn Create(title: *const ::std::os::raw::c_char) -> *mut MegaHackExt_Window {
        MegaHackExt_Window_Create(title)
    }
    #[inline]
    pub unsafe fn add(&mut self, obj: *mut ::std::os::raw::c_void) {
        MegaHackExt_Window_add(self, obj)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_HorizontalLayout {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_MegaHackExt_HorizontalLayout() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_HorizontalLayout>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_HorizontalLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_HorizontalLayout>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_HorizontalLayout))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@HorizontalLayout@MegaHackExt@@SAPAV12@PAX0@Z"]
    pub fn MegaHackExt_HorizontalLayout_Create(
        left: *mut ::std::os::raw::c_void,
        right: *mut ::std::os::raw::c_void,
    ) -> *mut MegaHackExt_HorizontalLayout;
}
impl MegaHackExt_HorizontalLayout {
    #[inline]
    pub unsafe fn Create(
        left: *mut ::std::os::raw::c_void,
        right: *mut ::std::os::raw::c_void,
    ) -> *mut MegaHackExt_HorizontalLayout {
        MegaHackExt_HorizontalLayout_Create(left, right)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_Label {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_MegaHackExt_Label() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_Label>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_Label))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_Label>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_Label))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@Label@MegaHackExt@@SAPAV12@PBD@Z"]
    pub fn MegaHackExt_Label_Create(str_: *const ::std::os::raw::c_char) -> *mut MegaHackExt_Label;
}
extern "C" {
    #[link_name = "\u{1}?set@Label@MegaHackExt@@QEAAXPEBD@Z"]
    pub fn MegaHackExt_Label_set(this: *mut MegaHackExt_Label, str_: *const ::std::os::raw::c_char);
}
impl MegaHackExt_Label {
    #[inline]
    pub unsafe fn Create(str_: *const ::std::os::raw::c_char) -> *mut MegaHackExt_Label {
        MegaHackExt_Label_Create(str_)
    }
    #[inline]
    pub unsafe fn set(&mut self, str_: *const ::std::os::raw::c_char) {
        MegaHackExt_Label_set(self, str_)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_Button {
    pub _address: u8,
}
pub type MegaHackExt_Button_Callback =
::std::option::Option<unsafe extern "C" fn(arg1: *mut MegaHackExt_Button)>;
#[test]
fn bindgen_test_layout_MegaHackExt_Button() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_Button>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_Button))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_Button>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_Button))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@Button@MegaHackExt@@SAPAV12@PBD@Z"]
    pub fn MegaHackExt_Button_Create(
        str_: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_Button;
}
extern "C" {
    #[link_name = "\u{1}?setCallback@Button@MegaHackExt@@QAEXP6GXPAV12@@Z@Z"]
    pub fn MegaHackExt_Button_setCallback(
        this: *mut MegaHackExt_Button,
        callback: MegaHackExt_Button_Callback,
    );
}
impl MegaHackExt_Button {
    #[inline]
    pub unsafe fn Create(str_: *const ::std::os::raw::c_char) -> *mut MegaHackExt_Button {
        MegaHackExt_Button_Create(str_)
    }
    #[inline]
    pub unsafe fn setCallback(&mut self, callback: MegaHackExt_Button_Callback) {
        MegaHackExt_Button_setCallback(self, callback)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_CheckBox {
    pub _address: u8,
}
pub type MegaHackExt_CheckBox_Callback =
::std::option::Option<unsafe extern "C" fn(arg1: *mut MegaHackExt_CheckBox, arg2: bool)>;
#[test]
fn bindgen_test_layout_MegaHackExt_CheckBox() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_CheckBox>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_CheckBox))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_CheckBox>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_CheckBox))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@CheckBox@MegaHackExt@@SAPAV12@PBD@Z"]
    pub fn MegaHackExt_CheckBox_Create(
        str_: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_CheckBox;
}
extern "C" {
    #[link_name = "\u{1}?setCallback@CheckBox@MegaHackExt@@QAEXP6GXPAV12@_N@Z@Z"]
    pub fn MegaHackExt_CheckBox_setCallback(
        this: *mut MegaHackExt_CheckBox,
        callback: MegaHackExt_CheckBox_Callback,
    );
}
extern "C" {
    #[link_name = "\u{1}?set@CheckBox@MegaHackExt@@QEAAX_N0@Z"]
    pub fn MegaHackExt_CheckBox_set(
        this: *mut MegaHackExt_CheckBox,
        b: bool,
        trigger_callback: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?get@CheckBox@MegaHackExt@@QEBA_NXZ"]
    pub fn MegaHackExt_CheckBox_get(this: *const MegaHackExt_CheckBox) -> bool;
}
impl MegaHackExt_CheckBox {
    #[inline]
    pub unsafe fn Create(str_: *const ::std::os::raw::c_char) -> *mut MegaHackExt_CheckBox {
        MegaHackExt_CheckBox_Create(str_)
    }
    #[inline]
    pub unsafe fn setCallback(&mut self, callback: MegaHackExt_CheckBox_Callback) {
        MegaHackExt_CheckBox_setCallback(self, callback)
    }
    #[inline]
    pub unsafe fn set(&mut self, b: bool, trigger_callback: bool) {
        MegaHackExt_CheckBox_set(self, b, trigger_callback)
    }
    #[inline]
    pub unsafe fn get(&self) -> bool {
        MegaHackExt_CheckBox_get(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_ComboBox {
    pub _address: u8,
}
pub type MegaHackExt_ComboBox_Callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut MegaHackExt_ComboBox,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ),
>;
#[test]
fn bindgen_test_layout_MegaHackExt_ComboBox() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_ComboBox>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_ComboBox))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_ComboBox>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_ComboBox))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@ComboBox@MegaHackExt@@SAPEAV12@PEBD0@Z"]
    pub fn MegaHackExt_ComboBox_Create(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_ComboBox;
}
extern "C" {
    #[link_name = "\u{1}?setCallback@ComboBox@MegaHackExt@@QEAAXP6AXPEAV12@HPEBD@Z@Z"]
    pub fn MegaHackExt_ComboBox_setCallback(
        this: *mut MegaHackExt_ComboBox,
        callback: MegaHackExt_ComboBox_Callback,
    );
}
extern "C" {
    #[link_name = "\u{1}?setValues@ComboBox@MegaHackExt@@QEAAXQEAPEBD_N@Z"]
    pub fn MegaHackExt_ComboBox_setValues(
        this: *mut MegaHackExt_ComboBox,
        strs: *mut *const ::std::os::raw::c_char,
        trigger_callback: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?set@ComboBox@MegaHackExt@@QEAAXH_N@Z"]
    pub fn MegaHackExt_ComboBox_set(
        this: *mut MegaHackExt_ComboBox,
        i: ::std::os::raw::c_int,
        trigger_callback: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?get@ComboBox@MegaHackExt@@QEBAHXZ"]
    pub fn MegaHackExt_ComboBox_get(this: *const MegaHackExt_ComboBox) -> ::std::os::raw::c_int;
}
impl MegaHackExt_ComboBox {
    #[inline]
    pub unsafe fn Create(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_ComboBox {
        MegaHackExt_ComboBox_Create(prefix, suffix)
    }
    #[inline]
    pub unsafe fn setCallback(&mut self, callback: MegaHackExt_ComboBox_Callback) {
        MegaHackExt_ComboBox_setCallback(self, callback)
    }
    #[inline]
    pub unsafe fn setValues(
        &mut self,
        strs: *mut *const ::std::os::raw::c_char,
        trigger_callback: bool,
    ) {
        MegaHackExt_ComboBox_setValues(self, strs, trigger_callback)
    }
    #[inline]
    pub unsafe fn set(&mut self, i: ::std::os::raw::c_int, trigger_callback: bool) {
        MegaHackExt_ComboBox_set(self, i, trigger_callback)
    }
    #[inline]
    pub unsafe fn get(&self) -> ::std::os::raw::c_int {
        MegaHackExt_ComboBox_get(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_SelectionBox {
    pub _address: u8,
}
pub type MegaHackExt_SelectionBox_Callback =
::std::option::Option<unsafe extern "C" fn(arg1: *mut MegaHackExt_SelectionBox)>;
#[test]
fn bindgen_test_layout_MegaHackExt_SelectionBox() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_SelectionBox>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_SelectionBox))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_SelectionBox>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_SelectionBox))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@SelectionBox@MegaHackExt@@SAPEAV12@PEBD@Z"]
    pub fn MegaHackExt_SelectionBox_Create(
        str_: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_SelectionBox;
}
extern "C" {
    #[link_name = "\u{1}?setCallback@SelectionBox@MegaHackExt@@QEAAXP6AXPEAV12@@Z@Z"]
    pub fn MegaHackExt_SelectionBox_setCallback(
        this: *mut MegaHackExt_SelectionBox,
        callback: MegaHackExt_SelectionBox_Callback,
    );
}
extern "C" {
    #[link_name = "\u{1}?setValues@SelectionBox@MegaHackExt@@QEAAXQEAPEBD@Z"]
    pub fn MegaHackExt_SelectionBox_setValues(
        this: *mut MegaHackExt_SelectionBox,
        strs: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?set@SelectionBox@MegaHackExt@@QEAAXH_N@Z"]
    pub fn MegaHackExt_SelectionBox_set(
        this: *mut MegaHackExt_SelectionBox,
        i: ::std::os::raw::c_int,
        b: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?get@SelectionBox@MegaHackExt@@QEBA_NH@Z"]
    pub fn MegaHackExt_SelectionBox_get(
        this: *const MegaHackExt_SelectionBox,
        i: ::std::os::raw::c_int,
    ) -> bool;
}
impl MegaHackExt_SelectionBox {
    #[inline]
    pub unsafe fn Create(str_: *const ::std::os::raw::c_char) -> *mut MegaHackExt_SelectionBox {
        MegaHackExt_SelectionBox_Create(str_)
    }
    #[inline]
    pub unsafe fn setCallback(&mut self, callback: MegaHackExt_SelectionBox_Callback) {
        MegaHackExt_SelectionBox_setCallback(self, callback)
    }
    #[inline]
    pub unsafe fn setValues(&mut self, strs: *mut *const ::std::os::raw::c_char) {
        MegaHackExt_SelectionBox_setValues(self, strs)
    }
    #[inline]
    pub unsafe fn set(&mut self, i: ::std::os::raw::c_int, b: bool) {
        MegaHackExt_SelectionBox_set(self, i, b)
    }
    #[inline]
    pub unsafe fn get(&self, i: ::std::os::raw::c_int) -> bool {
        MegaHackExt_SelectionBox_get(self, i)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_TextBox {
    pub _address: u8,
}
pub type MegaHackExt_TextBox_Callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MegaHackExt_TextBox, arg2: *const ::std::os::raw::c_char),
>;
#[test]
fn bindgen_test_layout_MegaHackExt_TextBox() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_TextBox>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_TextBox))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_TextBox>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_TextBox))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@TextBox@MegaHackExt@@SAPEAV12@PEBD@Z"]
    pub fn MegaHackExt_TextBox_Create(
        placeholder: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_TextBox;
}
extern "C" {
    #[link_name = "\u{1}?setCallback@TextBox@MegaHackExt@@QEAAXP6AXPEAV12@PEBD@Z@Z"]
    pub fn MegaHackExt_TextBox_setCallback(
        this: *mut MegaHackExt_TextBox,
        callback: MegaHackExt_TextBox_Callback,
    );
}
extern "C" {
    #[link_name = "\u{1}?set@TextBox@MegaHackExt@@QEAAXPEBD@Z"]
    pub fn MegaHackExt_TextBox_set(
        this: *mut MegaHackExt_TextBox,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}?get@TextBox@MegaHackExt@@QEBAPEBDXZ"]
    pub fn MegaHackExt_TextBox_get(
        this: *const MegaHackExt_TextBox,
    ) -> *const ::std::os::raw::c_char;
}
impl MegaHackExt_TextBox {
    #[inline]
    pub unsafe fn Create(placeholder: *const ::std::os::raw::c_char) -> *mut MegaHackExt_TextBox {
        MegaHackExt_TextBox_Create(placeholder)
    }
    #[inline]
    pub unsafe fn setCallback(&mut self, callback: MegaHackExt_TextBox_Callback) {
        MegaHackExt_TextBox_setCallback(self, callback)
    }
    #[inline]
    pub unsafe fn set(&mut self, str_: *const ::std::os::raw::c_char) {
        MegaHackExt_TextBox_set(self, str_)
    }
    #[inline]
    pub unsafe fn get(&self) -> *const ::std::os::raw::c_char {
        MegaHackExt_TextBox_get(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_Spinner {
    pub _address: u8,
}
pub type MegaHackExt_Spinner_Callback =
::std::option::Option<unsafe extern "C" fn(arg1: *mut MegaHackExt_Spinner, value: f64)>;
#[test]
fn bindgen_test_layout_MegaHackExt_Spinner() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_Spinner>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_Spinner))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_Spinner>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_Spinner))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@Spinner@MegaHackExt@@SAPEAV12@PEBD0@Z"]
    pub fn MegaHackExt_Spinner_Create(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_Spinner;
}
extern "C" {
    #[link_name = "\u{1}?setCallback@Spinner@MegaHackExt@@QEAAXP6AXPEAV12@N@Z@Z"]
    pub fn MegaHackExt_Spinner_setCallback(
        this: *mut MegaHackExt_Spinner,
        callback: MegaHackExt_Spinner_Callback,
    );
}
extern "C" {
    #[link_name = "\u{1}?set@Spinner@MegaHackExt@@QEAAXN_N@Z"]
    pub fn MegaHackExt_Spinner_set(this: *mut MegaHackExt_Spinner, v: f64, trigger_callback: bool);
}
extern "C" {
    #[link_name = "\u{1}?get@Spinner@MegaHackExt@@QEBANXZ"]
    pub fn MegaHackExt_Spinner_get(this: *const MegaHackExt_Spinner) -> f64;
}
impl MegaHackExt_Spinner {
    #[inline]
    pub unsafe fn Create(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    ) -> *mut MegaHackExt_Spinner {
        MegaHackExt_Spinner_Create(prefix, suffix)
    }
    #[inline]
    pub unsafe fn setCallback(&mut self, callback: MegaHackExt_Spinner_Callback) {
        MegaHackExt_Spinner_setCallback(self, callback)
    }
    #[inline]
    pub unsafe fn set(&mut self, v: f64, trigger_callback: bool) {
        MegaHackExt_Spinner_set(self, v, trigger_callback)
    }
    #[inline]
    pub unsafe fn get(&self) -> f64 {
        MegaHackExt_Spinner_get(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct MegaHackExt_ColourPicker {
    pub _address: u8,
}
pub type MegaHackExt_ColourPicker_Callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut MegaHackExt_ColourPicker, arg2: MegaHackExt_Colour),
>;
#[test]
fn bindgen_test_layout_MegaHackExt_ColourPicker() {
    assert_eq!(
        ::std::mem::size_of::<MegaHackExt_ColourPicker>(),
        1usize,
        concat!("Size of: ", stringify!(MegaHackExt_ColourPicker))
    );
    assert_eq!(
        ::std::mem::align_of::<MegaHackExt_ColourPicker>(),
        1usize,
        concat!("Alignment of ", stringify!(MegaHackExt_ColourPicker))
    );
}
extern "C" {
    #[link_name = "\u{1}?Create@ColourPicker@MegaHackExt@@SAPEAV12@UColour@2@@Z"]
    pub fn MegaHackExt_ColourPicker_Create(
        colour: MegaHackExt_Colour,
    ) -> *mut MegaHackExt_ColourPicker;
}
extern "C" {
    #[link_name = "\u{1}?setCallback@ColourPicker@MegaHackExt@@QEAAXP6AXPEAV12@UColour@2@@Z@Z"]
    pub fn MegaHackExt_ColourPicker_setCallback(
        this: *mut MegaHackExt_ColourPicker,
        callback: MegaHackExt_ColourPicker_Callback,
    );
}
extern "C" {
    #[link_name = "\u{1}?set@ColourPicker@MegaHackExt@@QEAAXUColour@2@_N@Z"]
    pub fn MegaHackExt_ColourPicker_set(
        this: *mut MegaHackExt_ColourPicker,
        colour: MegaHackExt_Colour,
        trigger_callback: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}?get@ColourPicker@MegaHackExt@@QEBA?AUColour@2@XZ"]
    pub fn MegaHackExt_ColourPicker_get(
        this: *const MegaHackExt_ColourPicker,
    ) -> MegaHackExt_Colour;
}
impl MegaHackExt_ColourPicker {
    #[inline]
    pub unsafe fn Create(colour: MegaHackExt_Colour) -> *mut MegaHackExt_ColourPicker {
        MegaHackExt_ColourPicker_Create(colour)
    }
    #[inline]
    pub unsafe fn setCallback(&mut self, callback: MegaHackExt_ColourPicker_Callback) {
        MegaHackExt_ColourPicker_setCallback(self, callback)
    }
    #[inline]
    pub unsafe fn set(&mut self, colour: MegaHackExt_Colour, trigger_callback: bool) {
        MegaHackExt_ColourPicker_set(self, colour, trigger_callback)
    }
    #[inline]
    pub unsafe fn get(&self) -> MegaHackExt_Colour {
        MegaHackExt_ColourPicker_get(self)
    }
}